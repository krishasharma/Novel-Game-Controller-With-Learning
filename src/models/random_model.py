from .model import Model # was from models.model import Model
from tensorflow.keras import Sequential, layers, models
# was from tensorflow.keras.layers.experimental.preprocessing import Rescaling
from tensorflow.keras.layers import Rescaling
from tensorflow.keras.optimizers import RMSprop, Adam
import numpy as np

class RandomModel(Model):
    def _define_model(self, input_shape, categories_count):
        # Your code goes here
        # you have to initialize self.model to a keras model
        # very similar to transfered_model.py, the only difference is that you should randomize the weights
        # load your basic model with keras's load_model function
        # freeze the weights of the loaded model to make sure the training doesn't affect them
        # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
        # randomize the weights of the loaded model, possibly by using _randomize_layers
        # use this model by removing the last layer, adding dense layers and an output layer
        
        # Load your basic model with keras's load_model function
        base_model = models.load_model('/Users/krishasharma/Desktop/CMPM 146/P6/basic_model.keras')  # Replace with the correct path to your basic model

        # Freeze the weights of the loaded model to make sure the training doesn't affect them
        for layer in base_model.layers:
            layer.trainable = False

        # Randomize the weights of the loaded model, possibly by using _randomize_layers
        self._randomize_layers(base_model)

        # Recreate the Sequential model to ensure the input shape is correctly propagated
        model = Sequential()

        # Add the layers from the base model (excluding the last layer)
        for layer in base_model.layers[:-1]:
            model.add(layer)

        # Add a Flatten layer if the output of the last base model layer isn't flat (this depends on your specific model architecture)
        if len(model.layers[-1].output.shape) > 2:
            model.add(layers.Flatten())

        # Add new Dense layers with unique names
        model.add(layers.Dense(128, activation='relu', name='random_dense_1'))
        model.add(layers.Dense(categories_count, activation='softmax', name='random_output'))

        self.model = model
    
    def _compile_model(self):
        # Your code goes here
        # you have to compile the keras model, similar to the example in the writeup
        
        # Compile the keras model, similar to the example in the writeup
        self.model.compile(
            optimizer=Adam(learning_rate=0.001),  # Using Adam optimizer
            loss='categorical_crossentropy',     # Appropriate for multi-class classification
            metrics=['accuracy']                 # Tracking accuracy during training
        )

    @staticmethod
    def _randomize_layers(model):
        # Your code goes here

        # you can write a function here to set the weights to a random value
        # use this function in _define_model to randomize the weights of your loaded model
        
        # Randomize the weights of each layer in the model
        for layer in model.layers:
            if hasattr(layer, 'kernel_initializer') and layer.weights:
                # Get the existing weights
                weights = layer.get_weights()
                # Randomize the weights
                new_weights = [np.random.uniform(low=-0.05, high=0.05, size=w.shape) for w in weights]
                # Set the new randomized weights
                layer.set_weights(new_weights)
