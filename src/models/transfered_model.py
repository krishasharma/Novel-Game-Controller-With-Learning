from .model import Model
from tensorflow.keras import Sequential, layers, models
from tensorflow.keras.layers import Rescaling
from tensorflow.keras.optimizers import RMSprop, Adam

class TransferedModel(Model):
    def _define_model(self, input_shape, categories_count):
        # Your code goes here
        # you have to initialize self.model to a keras model
        # load your basic model with keras's load_model function
        # freeze the weights of the loaded model to make sure the training doesn't affect them
        # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
        # use this model by removing the last layer, adding dense layers and an output layer
        
        # Load your basic model with keras's load_model function
        base_model = models.load_model('/Users/krishasharma/Desktop/CMPM 146/P6/basic_model.keras')  # Absolute path to your basic model

        # Freeze the weights of the loaded model to make sure the training doesn't affect them
        for layer in base_model.layers:
            layer.trainable = False

        # Create the new model with Rescaling and modified layers
        model = Sequential()

        # Add a Rescaling layer with a unique name to avoid conflicts
        # model.add(Rescaling(1./255, input_shape=input_shape, name='unique_rescaling'))

        # Add the layers from the base model except the last one
        for layer in base_model.layers[:-1]:
            model.add(layer)

        # Add new Dense layers with unique names
        model.add(layers.Dense(128, activation='relu', name='transferred_dense_1'))
        model.add(layers.Dense(categories_count, activation='softmax', name='transferred_output'))

        # Set the newly created model to self.model
        self.model = model
    
    def _compile_model(self):
        # Your code goes here
        # you have to compile the keras model, similar to the example in the writeup
        
        # Compile the keras model, similar to the example in the writeup
        self.model.compile(
            optimizer=Adam(learning_rate=0.001),  # Using Adam optimizer
            loss='categorical_crossentropy',     # Appropriate for multi-class classification
            metrics=['accuracy']                 # Tracking accuracy during training
        )
